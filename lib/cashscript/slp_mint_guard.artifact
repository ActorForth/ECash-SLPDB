{
  "contractName": "SlpMintGuard",
  "constructorInputs": [
    {
      "name": "tokenId",
      "type": "bytes32"
    },
    {
      "name": "pkh",
      "type": "bytes20"
    },
    {
      "name": "isLocked",
      "type": "bytes1"
    }
  ],
  "abi": [
    {
      "name": "mint",
      "covenant": true,
      "inputs": [
        {
          "name": "slpAmt",
          "type": "bytes8"
        },
        {
          "name": "changeOutput",
          "type": "bytes"
        },
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        }
      ]
    },
    {
      "name": "lockUnlock",
      "covenant": true,
      "inputs": [
        {
          "name": "newLockState",
          "type": "bytes"
        },
        {
          "name": "changeOutput",
          "type": "bytes"
        },
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        }
      ]
    },
    {
      "name": "Transfer",
      "covenant": true,
      "inputs": [
        {
          "name": "newPk",
          "type": "pubkey"
        },
        {
          "name": "changeOutput",
          "type": "bytes"
        },
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        }
      ]
    }
  ],
  "bytecode": "OP_3 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_4 OP_PICK 6b OP_SPLIT OP_NIP OP_SIZE 34 OP_SUB OP_SPLIT OP_12 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_4 OP_ROLL OP_1 OP_EQUALVERIFY 396a04534c50000101044d494e5420 OP_3 OP_ROLL OP_CAT OP_8 OP_CAT OP_6 OP_ROLL OP_CAT 2202000000000000 17a914 OP_CAT OP_3 OP_ROLL OP_HASH160 OP_CAT 87 OP_CAT OP_ROT 0000000000000000 OP_3 OP_ROLL OP_CAT OP_ROT OP_CAT OP_5 OP_ROLL OP_CAT OP_HASH256 OP_EQUALVERIFY OP_3 OP_PICK OP_HASH160 OP_EQUALVERIFY OP_2SWAP OP_2DUP OP_SWAP OP_SIZE OP_1SUB OP_SPLIT OP_DROP OP_5 OP_ROLL OP_SHA256 OP_ROT OP_CHECKDATASIGVERIFY OP_CHECKSIG OP_NIP OP_ELSE OP_3 OP_PICK OP_1 OP_NUMEQUAL OP_IF OP_4 OP_PICK OP_NOP 68 OP_SPLIT OP_NIP OP_SIZE 34 OP_SUB OP_SPLIT OP_12 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_7 OP_PICK OP_1 OP_EQUAL OP_IF OP_4 OP_PICK 00 OP_EQUALVERIFY OP_ELSE OP_4 OP_PICK OP_1 OP_EQUALVERIFY OP_ENDIF 396a04534c50000101044d494e5420 OP_3 OP_ROLL OP_CAT OP_8 OP_CAT 0000000000000000 OP_CAT 2202000000000000 17a914 OP_CAT OP_1 OP_9 OP_ROLL OP_CAT OP_4 OP_ROLL OP_2 OP_SPLIT OP_NIP OP_CAT OP_HASH160 OP_CAT 87 OP_CAT OP_ROT 0000000000000000 OP_3 OP_ROLL OP_CAT OP_ROT OP_CAT OP_6 OP_ROLL OP_CAT OP_HASH256 OP_EQUALVERIFY OP_4 OP_PICK OP_HASH160 OP_EQUALVERIFY OP_4 OP_ROLL OP_4 OP_ROLL OP_2DUP OP_SWAP OP_SIZE OP_1SUB OP_SPLIT OP_DROP OP_6 OP_ROLL OP_SHA256 OP_ROT OP_CHECKDATASIGVERIFY OP_CHECKSIG OP_NIP OP_NIP OP_ELSE OP_3 OP_ROLL OP_2 OP_NUMEQUALVERIFY OP_3 OP_PICK OP_NOP 68 OP_SPLIT OP_NIP OP_SIZE 34 OP_SUB OP_SPLIT OP_12 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_4 OP_ROLL 00 OP_EQUALVERIFY OP_5 OP_PICK OP_SIZE OP_NIP 21 OP_NUMEQUALVERIFY 396a04534c50000101044d494e5420 OP_3 OP_ROLL OP_CAT OP_8 OP_CAT 0000000000000000 OP_CAT 2202000000000000 17a914 OP_CAT 0100 14 OP_CAT OP_7 OP_ROLL OP_HASH160 OP_CAT OP_4 OP_ROLL 17 OP_SPLIT OP_NIP OP_CAT OP_HASH160 OP_CAT 87 OP_CAT OP_ROT 0000000000000000 OP_3 OP_ROLL OP_CAT 2202000000000000 OP_CAT OP_ROT OP_CAT OP_4 OP_ROLL OP_CAT OP_HASH256 OP_EQUALVERIFY OP_2 OP_PICK OP_HASH160 OP_EQUALVERIFY OP_ROT OP_ROT OP_2DUP OP_SWAP OP_SIZE OP_1SUB OP_SPLIT OP_DROP OP_4 OP_ROLL OP_SHA256 OP_ROT OP_CHECKDATASIGVERIFY OP_CHECKSIG OP_ENDIF OP_ENDIF",
  "source": "// Copyright (C) 2020 Simple Ledger, Inc.\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software,\n// and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\npragma cashscript 0.5.3;\n\n// ****************************************************************************************************\n// SlpMintVault 0.1\n// ****************************************************************************************************\n// \n// Contract Methods include:\n//      - mint(bytes8 slpAmt, bytes changeOutput, pubkey pk, sig s)\n//      - lockUnlock(bytes newLockState, bytes changeOutput, pubkey pk, sig s)\n//      - transfer(bytes newOwnerScript, bytes changeOutput, pubkey pk, sig s)\n//\n// Constructor Inputs include:\n//      - tokenId:\n//      - pkh: the intended owner and recipient for any coins sent\n//      - isLocked:\n//\n// ****************************************************************************************************\n//\ncontract SlpMintVault(bytes32 tokenId, bytes20 pkh, bytes1 isLocked) {\n\n    // ******************************************************************\n    // Mint\n    // ******************************************************************\n    //\n    // Mint more tokens\n    //\n    // Parameters:\n    //      - slpAmt        : the amount to be minted\n    //      - changeOutput  : the final output used for change\n    //      - pubkey        : the pubkey of the pkh for this vault\n    //      - sig           : a signature from above pubkey for this txn\n    //\n    // ******************************************************************\n    //\n    function mint(bytes8 slpAmt, bytes changeOutput, pubkey pk, sig s) {\n\n        // check contract state\n        require(isLocked == 0x01);\n\n        // slp mint message \n        bytes slpMsg = 0x396a04534c50000101044d494e5420 + tokenId + 0x08 + slpAmt;\n        bytes batonOut = new OutputP2SH(0x2202000000000000, hash160(tx.bytecode));\n        require(tx.hashOutputs == hash256(0x0000000000000000 + slpMsg + batonOut + changeOutput));\n\n        // check for the p2pkh owner\n        require(hash160(pk) == pkh);\n        require(checkSig(s, pk));\n    }\n\n    // ******************************************************************\n    // LockUnlock \n    // ******************************************************************\n    //\n    // Lock or unlock the ability to exit \"exit()\"\n    // \n    // Parameters:\n    //      - newLockState  : new lock state (enable/disable) ability to\n    //                        use \"mint()\" or \"exit()\"\n    //      - changeOutput  : output for bch change\n    //      - pubkey        : the pubkey of the pkh for this vault\n    //      - s             : a signature from above pubkey needed for\n    //                        spending this coin\n    // ******************************************************************\n    //\n    function lockUnlock(bytes newLockState, bytes changeOutput, pubkey pk, sig s) {\n\n        // update byte code to frozen or unfrozen\n        if (newLockState == 0x01) {\n            require(isLocked == 0x00);\n        } else {\n            require(isLocked == 0x01);\n        }\n\n        // slp mint message \n        bytes slpMsg = 0x396a04534c50000101044d494e5420 + tokenId + 0x08 + 0x0000000000000000;\n        bytes batonOut = new OutputP2SH(0x2202000000000000, hash160(0x01 + newLockState + tx.bytecode.split(2)[1]));\n        require(tx.hashOutputs == hash256(0x0000000000000000 + slpMsg + batonOut + changeOutput));\n\n        // check for the p2pkh owner\n        require(hash160(pk) == pkh);\n        require(checkSig(s, pk));\n    }\n\n    // ******************************************************************\n    // Transfer \n    // ******************************************************************\n    //\n    // Transfer the Mint Vault to a new address.\n    // \n    // Parameters:\n    //      - newPk          : public key for new owner\n    //      - changeOutput   : output for bch change\n    //      - pubkey         : the pubkey of the pkh for this vault\n    //      - s              : a signature from above pubkey needed for\n    //                         spending this coin\n    // ******************************************************************\n    //\n    function Transfer(pubkey newPk, bytes changeOutput, pubkey pk, sig s) {\n\n        // check contract state\n        require(isLocked == 0x00);\n\n        // check pubkey length is correct\n        require(newPk.length == 33);\n\n        // slp mint message \n        bytes slpMsg = 0x396a04534c50000101044d494e5420 + tokenId + 0x08 + 0x0000000000000000;\n        bytes batonOut = new OutputP2SH(0x2202000000000000, hash160(0x0100 + 0x14 + hash160(newPk) + tx.bytecode.split(23)[1]));\n        require(tx.hashOutputs == hash256(0x0000000000000000 + slpMsg + 0x2202000000000000 + batonOut + changeOutput));\n\n        // check for the p2pkh owner\n        require(hash160(pk) == pkh);\n        require(checkSig(s, pk));\n    }\n\n}",
  "compiler": {
    "name": "cashc",
    "version": "0.5.3"
  },
  "updatedAt": "2020-10-29T21:25:41.008Z"
}