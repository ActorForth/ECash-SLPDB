{
  "contractName": "SlpMintGuard",
  "constructorInputs": [
    {
      "name": "scriptBaseSha256",
      "type": "bytes32"
    },
    {
      "name": "slpMintFront",
      "type": "bytes23"
    },
    {
      "name": "tokenId",
      "type": "bytes32"
    },
    {
      "name": "pkh",
      "type": "bytes20"
    }
  ],
  "abi": [
    {
      "name": "Transfer",
      "covenant": true,
      "inputs": [
        {
          "name": "newPk",
          "type": "pubkey"
        },
        {
          "name": "tokenReceiverOut",
          "type": "bytes"
        },
        {
          "name": "changeOutput",
          "type": "bytes"
        },
        {
          "name": "scriptBase",
          "type": "bytes"
        },
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        }
      ]
    },
    {
      "name": "Mint",
      "covenant": true,
      "inputs": [
        {
          "name": "slpAmt",
          "type": "bytes8"
        },
        {
          "name": "tokenReceiverOut",
          "type": "bytes"
        },
        {
          "name": "changeOutput",
          "type": "bytes"
        },
        {
          "name": "scriptBase",
          "type": "bytes"
        },
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        }
      ]
    }
  ],
  "bytecode": "OP_4 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_5 OP_PICK OP_SIZE 28 OP_SUB OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_7 OP_PICK OP_SIZE OP_NIP 21 OP_NUMEQUALVERIFY OP_2OVER OP_SWAP OP_CAT 010208 OP_CAT 0000000000000000 OP_CAT 2202000000000000 17a914 OP_CAT 14 OP_10 OP_ROLL OP_HASH160 OP_CAT 20 OP_CAT OP_6 OP_ROLL OP_CAT 17 OP_CAT OP_5 OP_ROLL OP_CAT 20 OP_CAT OP_4 OP_PICK OP_CAT OP_10 OP_PICK OP_CAT OP_HASH160 OP_CAT 87 OP_CAT OP_SWAP OP_7 OP_ROLL OP_CAT OP_SWAP OP_CAT OP_6 OP_PICK 00000000 OP_EQUAL OP_NOTIF OP_2DUP OP_8 OP_PICK OP_CAT OP_HASH256 OP_EQUALVERIFY OP_ELSE OP_2DUP OP_HASH256 OP_EQUALVERIFY OP_ENDIF OP_7 OP_ROLL OP_SHA256 OP_3 OP_ROLL OP_EQUALVERIFY OP_6 OP_PICK OP_HASH160 OP_3 OP_ROLL OP_EQUALVERIFY OP_6 OP_ROLL OP_6 OP_ROLL OP_2DUP OP_SWAP OP_SIZE OP_1SUB OP_SPLIT OP_DROP OP_7 OP_ROLL OP_SHA256 OP_ROT OP_CODESEPARATOR OP_CHECKDATASIGVERIFY OP_CHECKSIGVERIFY OP_2DROP OP_2DROP OP_1 OP_ELSE OP_4 OP_ROLL OP_1 OP_NUMEQUALVERIFY OP_4 OP_PICK OP_SIZE 28 OP_SUB OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_2OVER OP_SWAP OP_CAT 010208 OP_CAT OP_7 OP_ROLL OP_CAT 2202000000000000 17a914 OP_CAT 14 OP_7 OP_PICK OP_CAT 20 OP_CAT OP_6 OP_ROLL OP_CAT 17 OP_CAT OP_5 OP_ROLL OP_CAT 20 OP_CAT OP_4 OP_PICK OP_CAT OP_9 OP_PICK OP_CAT OP_HASH160 OP_CAT 87 OP_CAT OP_SWAP OP_6 OP_ROLL OP_CAT OP_SWAP OP_CAT OP_5 OP_PICK 00000000 OP_EQUAL OP_NOTIF OP_2DUP OP_7 OP_PICK OP_CAT OP_HASH256 OP_EQUALVERIFY OP_ELSE OP_2DUP OP_HASH256 OP_EQUALVERIFY OP_ENDIF OP_6 OP_ROLL OP_SHA256 OP_3 OP_ROLL OP_EQUALVERIFY OP_5 OP_PICK OP_HASH160 OP_3 OP_ROLL OP_EQUALVERIFY OP_2ROT OP_2DUP OP_SWAP OP_SIZE OP_1SUB OP_SPLIT OP_DROP OP_6 OP_ROLL OP_SHA256 OP_ROT OP_CODESEPARATOR OP_CHECKDATASIGVERIFY OP_CHECKSIG OP_NIP OP_NIP OP_NIP OP_ENDIF",
  "source": "// Copyright (C) 2020 Simple Ledger, Inc.\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software,\n// and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\npragma cashscript 0.5.3;\n\n// ****************************************************************************************************\n// SlpMintGuard 0.1\n// ****************************************************************************************************\n//\n// Guards the minting baton from ever being burned.\n//\n// NOTE: OP_CODESEPARATOR must be manually added to the bytecode before each\n//       instance of OP_CHECKDATASIGVERIFY.  This allows the preimage to be lower\n//       than 520 bytes.\n//\n// Contract Methods include:\n//      - Mint(bytes8 slpAmt, bytes tokenReceiverOut, bytes changeOutput, bytes scriptBase, pubkey pk, sig s)\n//      - Transfer(pubkey newPk, bytes tokenReceiverOut, bytes changeOutput, bytes scriptBase, pubkey pk, sig s)\n//\n// Constructor Inputs include:\n//      - scriptBaseSha256: the sha256 of the base script required to be enforced \n//      - slpMintFront: the front part of the mint op_return message, less token id, baton idx, and amount\n//      - tokenId: the token's ID\n//      - pkh: the intended owner and recipient for any coins sent\n//\n// ****************************************************************************************************\n//\ncontract SlpMintGuard(bytes32 scriptBaseSha256, bytes23 slpMintFront, bytes32 tokenId, bytes20 pkh) {\n\n    // ******************************************************************\n    // Transfer \n    // ******************************************************************\n    //\n    // Transfer the Mint Vault to a new address.\n    // \n    // Parameters:\n    //      - newPk            : public key for new owner\n    //      - tokenReceiverOut : the output for the token receiver\n    //      - changeOutput     : output for bch change\n    //      - scriptBase       : script base to be used for receiver\n    //      - pubkey           : the pubkey of the pkh for this vault\n    //      - s                : a signature from above pubkey needed for\n    //                           spending this coin\n    // ******************************************************************\n    //\n    function Transfer(pubkey newPk, bytes tokenReceiverOut, bytes changeOutput, bytes scriptBase, pubkey pk, sig s) {\n\n        // check pubkey length is correct\n        require(newPk.length == 33);\n\n        // slp mint message \n        bytes slpMsg = slpMintFront + tokenId + 0x010208 + 0x0000000000000000;\n        bytes batonOut = new OutputP2SH(0x2202000000000000, hash160(0x14 + hash160(newPk) + 0x20 + tokenId + 0x17 + slpMintFront + 0x20 + scriptBaseSha256 + scriptBase));\n        bytes baseOuts = slpMsg + tokenReceiverOut + batonOut;\n        if (changeOutput != 0x00000000) {\n            require(tx.hashOutputs == hash256(baseOuts + changeOutput));\n        } else {\n            require(tx.hashOutputs == hash256(baseOuts));\n        }\n\n        // require script base hash\n        require(sha256(scriptBase) == scriptBaseSha256);\n        // manually place OP_CODESEPARATOR here\n\n        // check for the p2pkh owner\n        require(hash160(pk) == pkh);\n        require(checkSig(s, pk));\n    }\n\n    // ******************************************************************\n    // Mint\n    // ******************************************************************\n    //\n    // Mint more tokens\n    //\n    // Parameters:\n    //      - slpAmt           : the amount to be minted\n    //      - tokenReceiverOut : the output for the token receiver\n    //      - changeOutput     : the final output used for change\n    //      - scriptBase       : script base to be used for receiver\n    //      - pubkey           : the pubkey of the pkh for this vault\n    //      - sig              : a signature from above pubkey for this txn\n    //\n    // ******************************************************************\n    //\n    function Mint(bytes8 slpAmt, bytes tokenReceiverOut, bytes changeOutput, bytes scriptBase, pubkey pk, sig s) {\n \n        // slp mint message \n        bytes slpMsg = slpMintFront + tokenId + 0x010208 + slpAmt;\n        bytes batonOut = new OutputP2SH(0x2202000000000000, hash160(0x14 + pkh + 0x20 + tokenId + 0x17 + slpMintFront + 0x20 + scriptBaseSha256 + scriptBase));\n        bytes baseOuts = slpMsg + tokenReceiverOut + batonOut;\n        if (changeOutput != 0x00000000) {\n            require(tx.hashOutputs == hash256(baseOuts + changeOutput));\n        } else {\n            require(tx.hashOutputs == hash256(baseOuts));\n        }\n\n        // require script base hash\n        require(sha256(scriptBase) == scriptBaseSha256);\n        // manually place OP_CODESEPARATOR here\n\n        // check for the p2pkh owner\n        require(hash160(pk) == pkh);\n        require(checkSig(s, pk));\n    }\n\n}",
  "compiler": {
    "name": "cashc",
    "version": "0.5.3"
  },
  "updatedAt": "2020-10-31T22:38:55.985Z"
}